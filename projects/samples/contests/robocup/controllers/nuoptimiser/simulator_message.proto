/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2021 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

// package message.platform.webots;

// Copy of cyberbotics/webots projects/samples/contests/robocup/controllers/player/messages.proto


message Vector3 {
    double X = 1;
    double Y = 2;
    double Z = 3;
}

message AccelerometerMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [m/sË†2], x-axis, y-axis, z-axis
}

message GyroMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [rad/s], x-axis, y-axis, z-axis
}

message RobotPosition {
    string name  = 1;
    Vector3 value = 2;
}

message Message {
    enum MessageType {
        ERROR_MESSAGE   = 0;
        WARNING_MESSAGE = 1;
    }
    MessageType message_type = 1;
    string      text         = 2;
}

message OptimiserSensorMeasurements {
    // simulation time stamp at which the measurements were performed expressed in [ms] from the start of the connection
    uint32 time = 1;
    // real unix time stamp at which the measurements were performed in [ms]
    uint64                             real_time        = 2;
    repeated Message                   messages         = 3;
    repeated AccelerometerMeasurement  accelerometers   = 4;
    repeated GyroMeasurement           gyros            = 5;
    repeated RobotPosition             robot_position   = 6;
}

message MotorPosition {
    string name     = 1;
    double position = 2;  // linear or angular target position expressed in [m] or [rad]
}

message MotorVelocity {
    string name     = 1;
    double velocity = 2;  // linear or angular target velocity expressed in [m/s] or [rad/s]
}

message MotorForce {
    string name  = 1;
    double force = 2;  // target force expressed in [N]
}

message MotorTorque {
    string name   = 1;
    double torque = 2;  // target torque expressed in [N.m]
}

message MotorPID {
    string  name = 1;
    Vector3 PID  = 2;  // PID controller values
}

message SensorTimeStep {  // apply to all sensors: Accelerometer, Camera, Gyro, PositionSensor and TouchSensor
    string name     = 1;
    uint32 timeStep = 2;  // time between two measurements expressed in [ms], disabled if 0
}

message CameraQuality {
    string name    = 1;
    sint32 quality = 2;  // JPEG quality
}

message CameraExposure {
    string name     = 1;
    double exposure = 2;  // photometric exposure of the scene in joule per square meter [J/m^2]
}

message ActuatorRequests {
    repeated MotorPosition  motor_positions   = 1;
    repeated MotorVelocity  motor_velocities  = 2;
    repeated MotorForce     motor_forces      = 3;
    repeated MotorTorque    motor_torques     = 4;
    repeated MotorPID       motor_pids        = 5;
    repeated SensorTimeStep sensor_time_steps = 6;
    repeated CameraQuality  camera_qualities  = 7;
    repeated CameraExposure camera_exposures  = 8;
}

message OptimiserCommand {
    enum MessageType {
        TERMINATE = 0;
        RESET     = 1;
    }
    MessageType message_type = 1;
}